version: "3.8"

services:

  # --- Base de Datos para Kong (PostgreSQL) ---
  kong-database:
    image: postgres:13
    container_name: kong-database
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - kong-data:/var/lib/postgresql/data
    networks:
      - backend
    restart: unless-stopped

  # --- Migraciones de la Base de Datos de Kong ---
  kong-migrate:
    image: kong:latest
    container_name: kong-migrate
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PASSWORD: kong
    depends_on:
      - kong-database
    networks:
      - backend

  # --- Gateway API Kong ---
  kong:
    image: kong:latest
    container_name: kong
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    depends_on:
      - kong-migrate
      - microservicio-reportes-1
      - microservicio-reportes-2
      - monolito
    ports:
      - "9000:8000"
      - "9001:8001"
    networks:
      - backend
    restart: unless-stopped

  # --- Monolito (Aplicación Principal) ---
  monolito:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: monolito
    depends_on:
      - rabbitmq
      - redis
    networks:
      - backend
    env_file:
      - .env
    restart: unless-stopped

  # --- Microservicio de Generación de Reportes (Instancia 1) ---
  microservicio-reportes-1:
    build:
      context: ./microservicio-reportes
      dockerfile: Dockerfile
    container_name: microservicio-reportes-1
    networks:
      - backend
    restart: unless-stopped

  # --- Microservicio de Generación de Reportes (Instancia 2) ---
  microservicio-reportes-2:
    build:
      context: ./microservicio-reportes
      dockerfile: Dockerfile
    container_name: microservicio-reportes-2
    networks:
      - backend
    restart: unless-stopped

  # --- Microservicio de Notificaciones ---
  microservicio-notificaciones:
    build:
      context: ./microservicio-notificaciones
      dockerfile: Dockerfile
    container_name: microservicio-notificaciones
    depends_on:
      - rabbitmq
    networks:
      - backend
    env_file:
      - .env
    restart: unless-stopped

  # --- Broker de Mensajes (RabbitMQ) ---
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - backend
    restart: unless-stopped

  # --- Base de Datos en Memoria (Redis) ---
  redis:
    image: redis:alpine
    container_name: redis
    networks:
      - backend
    restart: unless-stopped

volumes:
  kong-data:

networks:
  backend:
    driver: bridge
